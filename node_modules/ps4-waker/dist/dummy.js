"use strict";

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const util = require('util');

const _require = require('events'),
      EventEmitter = _require.EventEmitter;

const ps4lib = require('./ps4lib');
/** Built in always handlers */


const HANDLERS = {
  /** Respond to search requests */
  srch(packet, rinfo) {
    this.udp.discover(`HTTP/1.1 ${this.options.status}`, {
      'host-id': this.options['host-id'],
      'host-type': 'PS4',
      'host-name': this.options['host-name'],
      'host-request-port': ps4lib.REQ_PORT
    }, rinfo);
  }

};

function Dummy(options) {
  this.options = _objectSpread({
    'host-id': '1234567890AB',
    'host-name': 'PS4-Waker',
    status: ps4lib.STATUS_STANDBY
  }, options);
  this.receivedWake = false;
  this.alive = true;
}

util.inherits(Dummy, EventEmitter);

Dummy.prototype.setStandby = function () {
  this.options.status = ps4lib.STATUS_STANDBY;
};

Dummy.prototype.close = function () {
  this.udp.close();
};

Dummy.prototype.listen = function () {
  // Dummy needs to run on special port 987;
  //  if we're not root, it's impossible....
  //  unless windows? shrug.
  if (process.getuid && process.getuid()) {
    this.emit('error', new Error('Root permissions required to start PS4 Dummy'));
    return;
  }

  const self = this;
  const s = ps4lib.udpSocket();
  this.udp = s;
  this.udp.bind(ps4lib.DDP_PORT, () => {
    s.setBroadcast(true);
    s.on('message', (msg, rinfo) => {
      const packet = ps4lib.parse(msg);
      const eventType = packet.type.toLowerCase();

      if (eventType in HANDLERS) {
        HANDLERS[eventType].call(self, packet, rinfo);
      }

      self.emit(eventType, packet, rinfo);
    });
    s.on('error', err => {
      self.emit('error', err);
    }); // ready and waiting...

    self.emit('ready');
  });
};

module.exports = Dummy;