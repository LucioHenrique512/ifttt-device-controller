"use strict";

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.starts-with");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const debug = require('debug')('ps4:cli-base');

const Detector = require('../detector');

const Device = require('../device');

const Socket = require('../ps4socket');

const LOGGED_IN_MESSAGE = 'Logged into device! Future uses should succeed';

function setupLogging(ui, d) {
  d.on('device-notified', device => {
    ui.logEvent('WAKEUP sent to device...', device.address);
  });
  d.on('error', err => {
    ui.logError(`Unable to connect to PS4 at ${d.lastInfo.address}`, err);
  });
  d.on('logging-in', () => {
    ui.logEvent('Logging in...');
  });
  d.on('sent-key', k => {
    ui.logEvent('Sent key', k);
  });
}

class CommandOnDevice {
  get requiresLogin() {
    // most commands require login, so default true
    return true;
  }

  run(ui) {
    var _this = this;

    return _asyncToGenerator(function* () {
      // validate provided options
      if (_this.requiresLogin && ui.options.skipLogin) {
        ui.logError(`${_this.constructor.name} requires login; --skip-login may not be used`);
        ui.exitWith(1);
      }

      return _this._search(ui,
      /*#__PURE__*/
      function () {
        var _ref = _asyncToGenerator(function* (device) {
          debug('await this.onDevice() ...');
          yield _this.onDevice(ui, device);
          debug('... onDevice complete; close()');
          return device.close();
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    })();
  } // eslint-disable-next-line


  onDevice(ui, device) {
    return _asyncToGenerator(function* () {
      throw new Error('Not Implemented');
    })();
  }

  _search(ui, onEach) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const options = ui.options,
            detectOpts = ui.detectOpts; // accept the device either if we don't care, or if it's
      //  the device we're looking for

      const condition = (device, rinfo) => !options.device || rinfo.address === options.device; // if either a device is provided OR there's no timeout,
      //  we just quickly stop on the first found; otherwise,
      //  just keep going


      const detectorFunction = options.device || options.timeout === undefined ? _this2._detectorFindFirst.bind(_this2) : _this2._detectorFindWhen.bind(_this2);
      const allPromises = [];
      yield detectorFunction(condition, detectOpts, (err, device, rinfo) => {
        if (err) {
          ui.logError(err.message);
          ui.exitWith(2);
          return;
        }

        allPromises.push(onEach(_this2._createDevice(ui, device, rinfo)));
      });
      yield Promise.all(allPromises);
    })();
  }

  _createDevice(ui, deviceInfo, rinfo) {
    const _ui$options = ui.options,
          credentials = _ui$options.credentials,
          skipLogin = _ui$options.skipLogin,
          passCode = _ui$options.passCode;
    const d = new Device(_objectSpread({
      address: rinfo.address,
      autoLogin: !skipLogin,
      credentials,
      passCode,
      ui
    }, ui.detectOpts));
    d.lastInfo = deviceInfo;
    d.lastInfo.address = rinfo.address;
    d.on('need-credentials', () => {
      debug('device needs credentials');

      this._requestCredentials(ui, d);
    });
    d.on('login_result', packet => {
      if (packet.result !== 0) {
        d.justPerformedRegistration = true; // eslint-disable-next-line

        const sock = d._socket;
        debug('login error from device; sock=', !!sock);

        this._handleLoginError(ui, sock, packet).catch(e => {
          // make unexpected errors more visible
          throw e;
        });
      } else if (d.justPerformedRegistration) {
        ui.logEvent(LOGGED_IN_MESSAGE);
      }
    });
    setupLogging(ui, d);
    return d;
  }

  _readCredentials(device) {
    const waker = device._waker(); // eslint-disable-line


    return new Promise((resolve, reject) => {
      waker.readCredentials((err, creds) => {
        if (err) {
          reject(err);
          return;
        }

        resolve(creds);
      });
    });
  }

  _requestCredentials(ui, device) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      if (ui.options.failfast) {
        ui.logError('No credentials found.');
        ui.exitWith(1);
        return;
      } // just assume we need to register as well


      const info = device.lastInfo;

      if (info.status.toUpperCase() !== 'OK') {
        ui.logError('Device must be awake for initial registration. Please turn it on manually and try again.');
        ui.exitWith(2);
        return;
      }

      const waker = device._waker(); // eslint-disable-line


      ui.logEvent('No credentials; Use the PS4 Second Screen App and try to connect to "PS4-Waker"');
      const credsResult = yield new Promise(resolve => {
        waker.requestCredentials((err, creds) => {
          if (err && err.message.startsWith('Root permissions')) {
            ui.requireRoot(err, device.opts.credentials);
            resolve(null);
            return;
          }

          if (err) {
            ui.logError(err);
            resolve(null);
            return;
          }

          resolve(creds);
        });
      });

      if (!credsResult) {
        ui.exitWith(1);
        return;
      }

      ui.logEvent('Got credentials! ', credsResult); // okay, now register

      yield _this3._registerDevice(ui, device, credsResult);
    })();
  }

  _registerDevice(ui, device, creds) {
    debug('_registerDevice'); // I believe we (sadly) need to bypass the Device here,
    //  since its openSocket() expects to login.

    const info = device.lastInfo;
    const argv = ui.options;
    const address = info.address;

    const sock = this._openSocket({
      accountId: creds['user-credential'],
      host: address,
      // if we're already registered, default "" is okay:
      // also, it MUST be a string
      pinCode: `${argv.pin || ''}`,
      // only necessary if you've enabled it on your account
      passCode: `${argv.passCode || ''}`
    }); // NOTE: this looks similar to the handlers attached to the
    // Device, but this socket is not attached to that, since
    // it's *only* for registration


    sock.on('login_result', packet => {
      if (packet.result === 0) {
        ui.logResult(LOGGED_IN_MESSAGE);
        ui.exitWith(0);
      } else {
        debug('login error from register; sock=', !!sock);

        this._handleLoginError(ui, sock, packet);
      }
    }).on('error', err => {
      ui.logError(`Unable to connect to PS4 at ${address}`, err);
      ui.exitWith(1);
    });
  }

  _openSocket(args) {
    return new Socket(args);
  }

  _handleLoginError(ui, sock, packet) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      switch (packet.error) {
        case 'PIN_IS_NEEDED':
          yield _this4._requestPin(ui, sock);
          break;

        case 'PASSCODE_IS_NEEDED':
          ui.logError('Login error: Passcode is required');
          ui.exitWith(4);
          break;

        case 'PASSCODE_IS_UNMATCHED':
          ui.logError('Login error: Incorrect Passcode');
          ui.exitWith(5);
          break;

        default:
          ui.logError(`Unexpected error: ${packet.result} / ${packet.error}`);
          ui.exitWith(3);
      }
    })();
  }

  _requestPin(ui, sock) {
    return _asyncToGenerator(function* () {
      ui.logEvent("Go to 'Settings -> Mobile App Connection Settings -> Add Device'" + ' on your PS4 to obtain the PIN code.'); // prompt the user

      const pin = yield ui.prompt('Pin code> ');

      if (!pin) {
        ui.logError('Pin is required');
        ui.exitWith(4);
        return;
      }

      debug(`got pin ${pin}, sock? ${!!sock}`);
      sock.login(pin);
    })();
  }
  /*
   * Facade for stub-ability
   */


  _detectorFindFirst(...args) {
    return Detector.findFirst(...args);
  }

  _detectorFindWhen(...args) {
    return Detector.findWhen(...args);
  }

}

module.exports = {
  CommandOnDevice
};